<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        
    <title>Martes Start</title>
    <HTA:APPLICATION
        ID="MartesStart"
        APPLICATIONNAME="Martes Start"
        BORDER="thin"
        BORDERSTYLE="normal"
        CAPTION="yes"
        SHOWINTASKBAR="yes"
        SINGLEINSTANCE="yes"
        SYSMENU="yes"
        WINDOWSTATE="normal"
        WIDTH="400"      <!-- Initial width in pixels -->
        HEIGHT="400"     <!-- Initial height in pixels -->
        CODEPAGE="65001"
    />
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #fffaf1;
            color: #333;
        }

        .sticky-header {
            position: sticky;
            top: 0;
            background-color: #fffaf1;
            padding: 10px 20px;
            z-index: 1000;
            display: flex;
            align-items: center;
        }

        .sticky-header img {
            height: 40px;
            margin-right: 20px;
        }

        .sticky-header h1 {
            margin: 0;
            font-size: 1.5em;
            color: #2c3e50;
        }

        .container {
            max-width: 600px;
            margin: auto;
            padding: 20px;
            background-color: #fffaf1;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .field {
            margin-bottom: 15px;
        }

        button {
            padding: 10px 20px;
            margin-right: 10px;
            font-size: 14px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        #runButton {
            background-color: #28a745;
            color: #fff;
        }

        #exitButton {
            background-color: #dc3545;
            color: #fff;
        }

        #pinButton {
            background-color: #007bff;
            color: #fff;
        }

        #status {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            background-color: #e9ecef;
            border-radius: 4px;
            white-space: pre-wrap;
            overflow-y: auto;
            max-height: 300px;
            display: none;
        }

        #log {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            background-color: #f8f9fa;
            border-radius: 4px;
            white-space: pre-wrap;
            overflow-y: auto;
            max-height: 200px;
            font-size: 12px;
            color: #555;
        }
    </style>
    <script type="text/javascript">
        // Funktion för att logga meddelanden
        function logMessage(message) {
            var logDiv = document.getElementById('log');
            var timestamp = new Date().toLocaleTimeString();
            logDiv.innerHTML += "[" + timestamp + "] " + message + "\n";
            logDiv.scrollTop = logDiv.scrollHeight; // Scrolla till botten
        }

        // Funktion för att köra batch-filen och fånga upp utdata
        function runBatch(batchFileName) {
            var statusDiv = document.getElementById('status');
            statusDiv.style.display = "block";
            statusDiv.innerHTML = "Executing " + batchFileName + "...\n";
            logMessage("Initiated execution of " + batchFileName + ".");

            try {
                var fso = new ActiveXObject("Scripting.FileSystemObject");
                var shell = new ActiveXObject("WScript.Shell");
                
                // Hämta mappen där HTA-filen är placerad
                var scriptFolder = fso.GetAbsolutePathName(".");
                var batchFilePath = fso.BuildPath(scriptFolder, batchFileName);
                
                logMessage("Batch file path: " + batchFilePath);

                if (!fso.FileExists(batchFilePath)) {
                    var errorMsg = "Batch file not found: " + batchFilePath;
                    statusDiv.innerHTML += errorMsg;
                    logMessage(errorMsg);
                    return;
                }

                // Definiera en temporär fil för att fånga upp utdata
                var tempFolder = fso.GetSpecialFolder(2); // 2 = TemporaryFolder
                var tempFilePath = fso.BuildPath(tempFolder, "batch_output.txt");
                
                logMessage("Temporary output file: " + tempFilePath);

                // Kommando för att köra batch-filen och omdirigera utdata
                var command = 'cmd.exe /c "' + batchFilePath + '" > "' + tempFilePath + '" 2>&1';
                logMessage("Executing command: " + command);
                shell.Run(command, 0, true); // 0 = göm fönstret, true = vänta tills det är klart

                // Läs utdata från den temporära filen
                if (fso.FileExists(tempFilePath)) {
                    var outputFile = fso.OpenTextFile(tempFilePath, 1); // 1 = ForReading
                    var outputContent = outputFile.ReadAll();
                    outputFile.Close();
                    fso.DeleteFile(tempFilePath);

                    logMessage("Batch file executed successfully.");

                    if (outputContent.trim() === "") {
                        var noOutputMsg = "No output captured.";
                        statusDiv.innerHTML += noOutputMsg;
                        logMessage(noOutputMsg);
                    } else {
                        statusDiv.innerHTML += outputContent;
                        logMessage("Batch Output:\n" + outputContent);
                    }
                } else {
                    var noOutputFileMsg = "No output captured.";
                    statusDiv.innerHTML += noOutputFileMsg;
                    logMessage(noOutputFileMsg);
                }
            } catch (e) {
                var errorMsg = "Error executing batch file: " + e.message;
                statusDiv.innerHTML += errorMsg;
                logMessage(errorMsg);
                alert(errorMsg);
            }
        }

        // Funktion för att skapa en genväg och försöka pinna den till aktivitetsfältet
        function createAndPinShortcut() {
            logMessage("Attempting to create and pin shortcut to taskbar.");

            try {
                var fso = new ActiveXObject("Scripting.FileSystemObject");
                var shell = new ActiveXObject("WScript.Shell");
                var desktopPath = shell.SpecialFolders("Desktop");
                var shortcutName = "MartesStart.lnk";
                var shortcutPath = fso.BuildPath(desktopPath, shortcutName);
                var htaPath = fso.BuildPath(fso.GetAbsolutePathName("."), "MartesStart.hta"); // Säkerställ att HTA-namnet matchar

                logMessage("Creating shortcut at: " + shortcutPath);
                logMessage("HTA Path: " + htaPath);

                // Skapa genvägen med hjälp av VBScript
                var vbsScript = 'Set oWS = WScript.CreateObject("WScript.Shell")\n';
                vbsScript += 'Set oLink = oWS.CreateShortcut("' + shortcutPath + '")\n';
                vbsScript += 'oLink.TargetPath = "mshta.exe"\n';
                vbsScript += 'oLink.Arguments = """' + htaPath + '"""\n';
                vbsScript += 'oLink.WorkingDirectory = """' + fso.GetParentFolderName(htaPath) + '"""\n';
                vbsScript += 'oLink.WindowStyle = 1\n'; // Normal fönster
                vbsScript += 'oLink.IconLocation = "shell32.dll, 1"\n'; // Standardikon
                vbsScript += 'oLink.Save';

                // Skriv VBScript till en temporär fil
                var tempFolder = fso.GetSpecialFolder(2); // 2 = TemporaryFolder
                var tempVbsPath = fso.BuildPath(tempFolder, "CreateShortcut.vbs");
                var tempVbsFile = fso.CreateTextFile(tempVbsPath, true);
                tempVbsFile.WriteLine(vbsScript);
                tempVbsFile.Close();

                // Kör VBScript för att skapa genvägen
                shell.Run('cscript.exe //nologo "' + tempVbsPath + '"', 0, true);
                logMessage("Shortcut created successfully.");

                // Ta bort den temporära VBScript-filen
                fso.DeleteFile(tempVbsPath);
                logMessage("Temporary VBScript file deleted.");

                // Försök att pinna genvägen till aktivitetsfältet
                pinShortcutToTaskbar(shortcutPath);
            } catch (e) {
                var errorMsg = "Error creating shortcut: " + e.message;
                logMessage(errorMsg);
                alert(errorMsg);
            }
        }

        // Funktion för att pinna en genväg till aktivitetsfältet
        function pinShortcutToTaskbar(shortcutPath) {
            logMessage("Attempting to pin shortcut to taskbar.");

            try {
                var fso = new ActiveXObject("Scripting.FileSystemObject");
                var shellApp = new ActiveXObject("Shell.Application");
                var folderPath = fso.GetParentFolderName(shortcutPath);
                var fileName = fso.GetFileName(shortcutPath);
                var folder = shellApp.Namespace(folderPath);
                var file = folder.ParseName(fileName);
                var verbs = file.Verbs();

                logMessage("Available verbs for the shortcut:");
                for (var i = 0; i < verbs.Count; i++) { // Ändrat från verbs.Count() till verbs.Count
                    var verb = verbs.Item(i);
                    logMessage(" - " + verb.Name);
                }

                var pinned = false;

                for (var i = 0; i < verbs.Count; i++) { // Ändrat från verbs.Count() till verbs.Count
                    var verb = verbs.Item(i);
                    // För svenska system, använd "fäst i aktivitetsfältet"
                    if (verb.Name.toLowerCase().indexOf("fäst i aktivitetsfältet") !== -1) {
                        verb.DoIt();
                        pinned = true;
                        logMessage("Shortcut pinned to taskbar successfully.");
                        break;
                    }
                }

                if (!pinned) {
                    var failMsg = "Failed to pin shortcut to taskbar. Attempting manual pinning.";
                    logMessage(failMsg);
                    alert(failMsg);
                    // Fallback: Visa genvägen och be användaren att pinna den manuellt
                }
            } catch (e) {
                var errorMsg = "Error pinning shortcut to taskbar: " + e.message;
                logMessage(errorMsg);
                alert(errorMsg);
            }
        }

        // Funktion för att avsluta HTA-applikationen
        function exitApp() {
            logMessage("Exiting application.");
            window.close();
        }
    </script>
</head>
<body>
    <div class="sticky-header">
        <img src="profu.png" alt="Profu Logo">
        <h1>Martes</h1>
    </div>

    <div class="container">
        <h2>Martes Start</h2>
        <div class="field">
            <button id="runButton" onclick="runBatch('start.bat')">Starta Martes</button>
            <button id="pinButton" onclick="createAndPinShortcut()">Pin to Taskbar</button>
            <button id="exitButton" onclick="exitApp()">Exit</button>
        </div>
        <div id="status"></div>
        <div id="log"></div>
    </div>
</body>
</html>
